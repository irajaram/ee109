			     EE 109  - Spring 2024
				  Speed Trap


Checkpoint 1:

1.  Splash screen with your name shown at start.

2.  Sensors start and stop timing.  If a measurement is started but not
    completed after 4 sec, the measurement is terminated and a message shown on
    the LCD.

3.  Elapsed time and speed displayed properly.  The elapsed time is shown to 1
    ms precision and the calculation of the speed based on the time delay
    between the sensors is correct and is shown to a precision of 0.1 cm/sec.

4.  The LED timing indicator operates properly, going on at the start of a
    timing event and off when it is complete.

Checkpoint 2:

1.  Rotary encoder can adjust threshold between 1 and 99 cm/sec.

2.  Buzzer sounds warning if speed measured on the local device is above the
    speed set with the rotary encoder.

3.  The servo motor adjusts the indicator to correctly point at speed that was
    measured on the local device.

4.  The maxium speed threshold is stored in EEPROM and retrieved when
    restarted.

Checkpoint 3:

1.  After a speed measurement is complete the device sends local speed to
    remote device over the serial link.

2.  Device can receive a speed from the remote device and displays it on LCD
    with 0.1 cm/sec precision.

3.  The RGB LED operate to show how the local and remote speeds compare.



Review Question 1 (Cost Analysis):

Assume we are building 1000 units of this system.  Use the provided part
numbers (see the webpage) and the digikey.com or jameco.com website to find the
total **cost per unit** (again assume we build a quantity of 1000 units) for
these speed traps.  Itemize the part costs (list each part and its unit cost
when bought in units of 1000) and then show the final cost per unit below.
Note: You only need to price the components used in the project (not all the
components in your lab kit.  Also, you do not need to account for the cost of
the circuit board or wires. In a real environment we would manufacture a PCB
(Printed Circuit Board). As an optional task, you can search online for PCB
manufacturers and what the costs and options are in creating a PCB.

Parts              Cost in 1000 units ($)     Cost for 1 ($)
Arduino                  27,600                  27.60
LCD Shield                9900                   9.90
Green LED                182.80                  0.41
Rotary Encoder + Knob    3327.23                 5.35
Buzzer                    406.98                 0.74
Servo motor               4760                   4.76
774HCT00                  307.04                 0.31
RGB Light                 N/a                    8.99
White LED (2)             443.08                 0.58
Phototransistor(2)        547.92                 1.34
Tri-State Buffer          274.72                 0.64
Resistors (9)             900                    0.90

Total :                  48,649.77               61.52


Review Question 2 (Health/Safety/Reliability)

Assume this system was to be sold to consumers for use at their home.

Considering reliability, health, and safety...

 - What scenarios might you suggest testing (considering both HW and SW) 
    before releasing the product for use? 
    
    One scenario I can think of would be ensuring the functionality of the 
    product even in edge cases. For example, if a user rotates the encoder 
    very quickly, it should not cause a buffer overflow. Additionally, I 
    should test if the information displayed to the LCD screen is decipherable
    in term of approprate lenght of time through durations as well as postioing
    on the screen.  



 - How might you make your design more reliable? By reliability we don't just
   mean keeping it running correctly (though you should consider that), but
   also how you can detect that a connected component has failed to gracefully
   handle such situations.  You can consider both HW and SW points of failure,
   issues related to the operational environment, etc. and how to mitigate
   those cases.

    One way would be to incorporate fail safes or some kind of code that allows
    the product to continue functioning even if a specific part fails. For example.
    if the servo motor fails that shouldn't affect the reading of speed and setting 
    speed threshold. I would also consider a design that is as resistant as possible
    to most external factors such as heat, dust, liquids, and more. 


