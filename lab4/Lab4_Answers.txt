			     EE 109 - Spring 2024
			 Lab 4 - Using the LCD Display

Edit the document below to fill in your answers to the review problems at the
end of the assignment web page.



1. (2 points) Normally we only read the bits in the PIN register, but a close
reading of the ATmega328P datasheet reveals that writing a 1 to PIN register
bit has the effect of inverting the bit in the corresponding PORT register.
For example, if you write a 1 to PINC, bit 3, it will invert bit 3 in the PORTC
register.  Based on this information, Billy Bruin has decided that he now knows
an easy way to "toggle" the E bit (flipping it to its opposite value) to
generate the E pulse in the lcd_writenibble() function by using this code.

    PINB |= (1 << PB1)     // Toggle E bit from 0 to 1
    PORTB |= (1 << PB1);   // Delay to make the E pulse longer
    PINB |= (1 << PB1)     // Toggle E bit from 1 to 0

Note: PINB |= (1 << PB1); is equivalent to PINB = PINB | (1 << PB1);

Tammy Trojan has also read the datasheeet and found that when reading the PIN
register, if a bit in the group is configured as input, the the voltage coming
in the PIN is returned, but if a bit is configured as output, the corresponding
PORT bit value is returned.  From this she concludes that Billy's method can
cause problems when used and recommends using this code to generate the E
pulse.

    PINB = (1 << PB1)      // Toggle E bit from 0 to 1
    PORTB |= (1 << PB1);   // Delay to make the E pulse longer
    PINB = (1 << PB1)      // Toggle E bit from 1 to 0

Tammy says that in this lab assignment with the PAUSE button on PB3, Billy
Bruin's code will cause the PAUSE button to stop working.  Can you explain why
this would happen?

The error in Billy's code comes from the use of "|=". In using this, he is accessing 
the PIN register in order toggle the bits that have a 1. However, it does not only toggle the bit
in the PIN register, but also the PORTB register, which also alters the set state of the pullup 
resistors. Thus, every time the E bit is toggled, the PAUSE button will be as well, causing it to stop 
working. Tammy's code avoids this as it directly toggles the values from 0 to 1 by using the PORT register rather
than the PIN register and also does not make any changes to the values already set to 1.







2. (1 point) Suppose we need to perform 3 concurrent tasks intermittently: Task
A every 20 ms, Task B every 15 ms, and Task C every 40 ms. What delay should be
used on each iteration of the main loop?
 
 5 ms



